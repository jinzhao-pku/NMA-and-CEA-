#构建contrast_based模型
fixed_effects_model <- nma.model.contrast(data_contrast = data,
differences = "logHR",
se.diffs = "std.err",
reference = "che",
type = "consistency",
effects = "fixed",
scale = "Log-odds Ratio")
set.seed(20232023)
fixed_effects_results <- nma.run(fixed_effects_model,
n.adapt=1000,
n.burnin=1000,
n.iter=10000)
#NMA分析的效应模型评估，即评估模型的拟合和识别潜在异常值，并输出杠杆图
nma.fit(fixed_effects_results)
#治疗排名结果图
sucra_out<- nma.rank(fixed_effects_results,
largerbetter=FALSE)
r<- sucra_out$rankogram+theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1))
r
sucra_out$sucraplot
#排名表热图
league.out<- nma.league(fixed_effects_results,
central.tdcy="median",
order =sucra_out$order,
log.scale =FALSE,
low.colour ="springgreen4",
mid.colour = "white",
high.colour ="red",
digits = 2)
m = league.out$heatplot
m[["plot_env"]][["midpoint"]] = 1
m[["data"]][["ct.stat"]] = exp(m[["data"]][["ct.stat"]])
m[["data"]][["lci"]] = exp(m[["data"]][["lci"]])
m[["data"]][["uci"]] = exp(m[["data"]][["uci"]])
m[["layers"]][[2]][["mapping"]][["label"]][[2]][[3]][[3]][[2]]=""
m[["layers"]][[2]][["mapping"]][["label"]][[2]][[3]][[3]][[4]]=""
m +
scale_fill_gradient2(low="red", mid="white", high="springgreen4", midpoint=1)
#森林图
f<- nma.forest(fixed_effects_results,
central.tdcy="median",
log.scale =FALSE,
comparator ='che')
f
#手动画图
# 创建数据框
df <- data.frame(
scheme = f[["data"]][["trt"]],
hr = exp(f[["data"]][["mean"]]),
lower = exp(f[["data"]][["lci"]]),
upper = exp(f[["data"]][["uci"]])
)
# 创建一个新的数据框
rect_df <- data.frame(scheme = df$scheme,
ymin = seq(0.5, 5.5, by = 1),
ymax = seq(1.5, 6.5, by = 1),
fill = c("grey", "white"))
# 绘制森林图
df$hr <- round(df$hr, 2)
df$lower <- round(df$lower, 2)
df$upper <- round(df$upper, 2)
df$text <- paste0("HR = ", df$hr, "\n95% CI = (", df$lower, ", ", df$upper, ")")
ggplot(df) +
geom_pointrange(aes(x = hr,
y = scheme,
xmin = lower,
xmax = upper),
color = "black") +
geom_vline(xintercept = 1,
linetype = "dashed",
color = "black") +
xlab("HR (95% CI)") +
ylab("Scheme") +
ggtitle("Hazard ratio compared with che")+
geom_text(aes(x = 0.85,
y = scheme,
label = text),
hjust = 0)+
scale_color_jama()+
theme_bw()
library(ggplot2)
library(dplyr)
library(tidyr)
rm(list = ls())
setwd("D:/project/NMA/CEA/point_plot")
data <- read.csv("point_plot.csv")
View(data)
data <- read.csv("point_plot.csv",fileEncoding = "UTF-8-BOM")
View(data)
ggplot(data, aes(x = incremental_utility_cam, y = incremental_cost_cam)) +
geom_point() +
geom_point(aes(x = incremental_utility_niv, y = incremental_cost_niv), color = "red") +
geom_point(aes(x = incremental_utility_sin, y = incremental_cost_sin), color = "blue") +
geom_point(aes(x = incremental_utility_tor, y = incremental_cost_tor), color = "green") +
geom_point(aes(x = incremental_utility_pem, y = incremental_cost_pem), color = "purple") +
geom_point(aes(x = incremental_utility_tis, y = incremental_cost_tis), color = "orange")
library(ggsci)
ggplot(data, aes(x = incremental_utility_cam, y = incremental_cost_cam)) +
geom_point() +
geom_point(aes(x = incremental_utility_niv, y = incremental_cost_niv), color = "red") +
geom_point(aes(x = incremental_utility_sin, y = incremental_cost_sin), color = "blue") +
geom_point(aes(x = incremental_utility_tor, y = incremental_cost_tor), color = "green") +
geom_point(aes(x = incremental_utility_pem, y = incremental_cost_pem), color = "purple") +
geom_point(aes(x = incremental_utility_tis, y = incremental_cost_tis), color = "orange") +
scale_color_jama()
ggplot(data, aes(x = incremental_utility_cam, y = incremental_cost_cam)) +
geom_point() +
geom_point(aes(x = incremental_utility_niv, y = incremental_cost_niv)) +
geom_point(aes(x = incremental_utility_sin, y = incremental_cost_sin)) +
geom_point(aes(x = incremental_utility_tor, y = incremental_cost_tor)) +
geom_point(aes(x = incremental_utility_pem, y = incremental_cost_pem)) +
geom_point(aes(x = incremental_utility_tis, y = incremental_cost_tis)) +
scale_color_jama()
ggplot(data, aes(x = incremental_utility_cam, y = incremental_cost_cam)) +
geom_point() +
geom_point(aes(x = incremental_utility_niv, y = incremental_cost_niv), color = "red") +
geom_point(aes(x = incremental_utility_sin, y = incremental_cost_sin), color = "blue") +
geom_point(aes(x = incremental_utility_tor, y = incremental_cost_tor), color = "green") +
geom_point(aes(x = incremental_utility_pem, y = incremental_cost_pem), color = "purple") +
geom_point(aes(x = incremental_utility_tis, y = incremental_cost_tis), color = "orange") +
scale_color_jama()
ggplot(data, aes(x = incremental_utility_cam, y = incremental_cost_cam)) +
geom_point() +
geom_point(aes(x = incremental_utility_niv, y = incremental_cost_niv), color = "red") +
geom_point(aes(x = incremental_utility_sin, y = incremental_cost_sin), color = "blue") +
geom_point(aes(x = incremental_utility_tor, y = incremental_cost_tor), color = "green") +
geom_point(aes(x = incremental_utility_pem, y = incremental_cost_pem), color = "purple") +
geom_point(aes(x = incremental_utility_tis, y = incremental_cost_tis), color = "orange") +
labs(x = "incredential_utility", y = "incredential_cost")
View(data)
ggplot(data, aes(x = incremental_utility_cam, y = incremental_cost_cam)) +
geom_point(aes(color = "incremental_utility_cam")) +
geom_point(aes(x = incremental_utility_niv, y = incremental_cost_niv, color = "incremental_utility_niv")) +
geom_point(aes(x = incremental_utility_sin, y = incremental_cost_sin, color = "incremental_utility_sin")) +
geom_point(aes(x = incremental_utility_tor, y = incremental_cost_tor, color = "incremental_utility_tor")) +
geom_point(aes(x = incremental_utility_pem, y = incremental_cost_pem, color = "incremental_utility_pem")) +
geom_point(aes(x = incremental_utility_tis, y = incremental_cost_tis, color = "incremental_utility_tis")) +
scale_color_jama() +
labs(color = "组别") +
theme(legend.position = "bottom") +
labs(x = "incredential_utility", y = "incredential_cost")
ggplot(data, aes(x = incremental_utility_cam, y = incremental_cost_cam)) +
geom_point(aes(color = "incremental_utility_cam")) +
geom_point(aes(x = incremental_utility_niv, y = incremental_cost_niv, color = "incremental_utility_niv")) +
geom_point(aes(x = incremental_utility_sin, y = incremental_cost_sin, color = "incremental_utility_sin")) +
geom_point(aes(x = incremental_utility_tor, y = incremental_cost_tor, color = "incremental_utility_tor")) +
geom_point(aes(x = incremental_utility_pem, y = incremental_cost_pem, color = "incremental_utility_pem")) +
geom_point(aes(x = incremental_utility_tis, y = incremental_cost_tis, color = "incremental_utility_tis")) +
scale_color_jama() +
labs(color = "group") +
theme(legend.position = "bottom") +
labs(x = "incredential_utility", y = "incredential_cost")
ggplot(data, aes(x = incremental_utility_cam, y = incremental_cost_cam)) +
geom_point(aes(color = "cam")) +
geom_point(aes(x = incremental_utility_niv, y = incremental_cost_niv, color = "niv")) +
geom_point(aes(x = incremental_utility_sin, y = incremental_cost_sin, color = "sin")) +
geom_point(aes(x = incremental_utility_tor, y = incremental_cost_tor, color = "tor")) +
geom_point(aes(x = incremental_utility_pem, y = incremental_cost_pem, color = "pem")) +
geom_point(aes(x = incremental_utility_tis, y = incremental_cost_tis, color = "tis")) +
scale_color_jama() +
labs(color = "group") +
theme(legend.position = "bottom") +
labs(x = "incredential_utility", y = "incredential_cost")
ggplot(data, aes(x = incremental_utility_cam, y = incremental_cost_cam)) +
geom_point(aes(color = "cam")) +
geom_point(aes(x = incremental_utility_niv, y = incremental_cost_niv, color = "niv")) +
geom_point(aes(x = incremental_utility_sin, y = incremental_cost_sin, color = "sin")) +
geom_point(aes(x = incremental_utility_tor, y = incremental_cost_tor, color = "tor")) +
geom_point(aes(x = incremental_utility_pem, y = incremental_cost_pem, color = "pem")) +
geom_point(aes(x = incremental_utility_tis, y = incremental_cost_tis, color = "tis")) +
scale_color_jama() +
labs(color = "group") +
theme(legend.position = "bottom") +
labs(x = "incredential_utility", y = "incredential_cost")+
theme_bw()
ggplot(data, aes(x = incremental_utility_cam, y = incremental_cost_cam)) +
geom_point(aes(color = "cam")) +
geom_point(aes(x = incremental_utility_niv, y = incremental_cost_niv, color = "niv")) +
geom_point(aes(x = incremental_utility_sin, y = incremental_cost_sin, color = "sin")) +
geom_point(aes(x = incremental_utility_tor, y = incremental_cost_tor, color = "tor")) +
geom_point(aes(x = incremental_utility_pem, y = incremental_cost_pem, color = "pem")) +
geom_point(aes(x = incremental_utility_tis, y = incremental_cost_tis, color = "tis")) +
scale_color_jama() +
labs(color = "group") +
theme(legend.position = "bottom", panel.background = element_rect(fill = "white")) +
labs(x = "incredential_utility", y = "incredential_cost")
ggplot(data, aes(x = incremental_utility_cam, y = incremental_cost_cam)) +
geom_point(aes(color = "cam")) +
geom_point(aes(x = incremental_utility_niv, y = incremental_cost_niv, color = "niv")) +
geom_point(aes(x = incremental_utility_sin, y = incremental_cost_sin, color = "sin")) +
geom_point(aes(x = incremental_utility_tor, y = incremental_cost_tor, color = "tor")) +
geom_point(aes(x = incremental_utility_pem, y = incremental_cost_pem, color = "pem")) +
geom_point(aes(x = incremental_utility_tis, y = incremental_cost_tis, color = "tis")) +
scale_color_jama() +
labs(color = "group") +
theme(legend.position = "bottom", panel.background = element_rect(fill = "white", color = "black"), axis.line = element_line(color = "black")) +
labs(x = "incredential_utility", y = "incredential_cost")
ggplot(data, aes(x = incremental_utility_cam, y = incremental_cost_cam)) +
geom_point(aes(color = "cam"),alpha = 0.7) +
geom_point(aes(x = incremental_utility_niv, y = incremental_cost_niv, color = "niv"),alpha = 0.7) +
geom_point(aes(x = incremental_utility_sin, y = incremental_cost_sin, color = "sin"),alpha = 0.7) +
geom_point(aes(x = incremental_utility_tor, y = incremental_cost_tor, color = "tor"),alpha = 0.7) +
geom_point(aes(x = incremental_utility_pem, y = incremental_cost_pem, color = "pem"),alpha = 0.7) +
geom_point(aes(x = incremental_utility_tis, y = incremental_cost_tis, color = "tis"),alpha = 0.7) +
scale_color_jama() +
labs(color = "group") +
theme(legend.position = "bottom", panel.background = element_rect(fill = "white", color = "black"), axis.line = element_line(color = "black")) +
labs(x = "incredential_utility", y = "incredential_cost")
ggplot(data, aes(x = incremental_utility_cam, y = incremental_cost_cam)) +
geom_point(aes(color = "cam"),alpha = 0.7) +
geom_point(aes(x = incremental_utility_sin, y = incremental_cost_sin, color = "sin"),alpha = 0.7) +
geom_point(aes(x = incremental_utility_tor, y = incremental_cost_tor, color = "tor"),alpha = 0.7) +
geom_point(aes(x = incremental_utility_tis, y = incremental_cost_tis, color = "tis"),alpha = 0.7) +
scale_color_jama() +
labs(color = "group") +
theme(legend.position = "bottom", panel.background = element_rect(fill = "white", color = "black"), axis.line = element_line(color = "black")) +
labs(x = "incredential_utility", y = "incredential_cost")
ggplot(data, aes(x = incremental_utility_cam, y = incremental_cost_cam)) +
geom_point(aes(color = "cam"),alpha = 0.7) +
geom_point(aes(x = incremental_utility_niv, y = incremental_cost_niv, color = "niv"),alpha = 0.7) +
geom_point(aes(x = incremental_utility_sin, y = incremental_cost_sin, color = "sin"),alpha = 0.7) +
geom_point(aes(x = incremental_utility_tor, y = incremental_cost_tor, color = "tor"),alpha = 0.7) +
geom_point(aes(x = incremental_utility_pem, y = incremental_cost_pem, color = "pem"),alpha = 0.7) +
geom_point(aes(x = incremental_utility_tis, y = incremental_cost_tis, color = "tis"),alpha = 0.7) +
scale_color_jama() +
labs(color = "group") +
theme(legend.position = "bottom", panel.background = element_rect(fill = "white", color = "black"), axis.line = element_line(color = "black")) +
labs(x = "incredential_utility", y = "incredential_cost")
library(BUGSnet)
library(ggplot2)
library(ggsci)
library(readr)
library(xlsx)
library(dplyr)
library(tidyr)
#OS----
rm(list = ls())
setwd("D:/project/NMA/cox_1/os")
data <- read_csv("cox_os.csv")
data <- data.prep(arm.data = data,
varname.t = "Treatment",
varname.s = "Study")
#网状图
net.plot(data)
#构建contrast_based模型
fixed_effects_model <- nma.model.contrast(data_contrast = data,
differences = "logHR",
se.diffs = "std.err",
reference = "che",
type = "consistency",
effects = "fixed",
scale = "Log-odds Ratio")
set.seed(20232023)
fixed_effects_results <- nma.run(fixed_effects_model,
n.adapt=1000,
n.burnin=1000,
n.iter=10000)
#NMA分析的效应模型评估，即评估模型的拟合和识别潜在异常值，并输出杠杆图
nma.fit(fixed_effects_results)
#治疗排名结果图
sucra_out<- nma.rank(fixed_effects_results,
largerbetter=FALSE)
r<- sucra_out$rankogram+theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1))
r
sucra_out$sucraplot
r
#NMA分析的效应模型评估，即评估模型的拟合和识别潜在异常值，并输出杠杆图
nma.fit(fixed_effects_results)
#排名表热图
league.out<- nma.league(fixed_effects_results,
central.tdcy="median",
order =sucra_out$order,
log.scale =FALSE,
low.colour ="springgreen4",
mid.colour = "white",
high.colour ="red",
digits = 2)
m = league.out$heatplot
m[["plot_env"]][["midpoint"]] = 1
m[["data"]][["ct.stat"]] = exp(m[["data"]][["ct.stat"]])
m[["data"]][["lci"]] = exp(m[["data"]][["lci"]])
m[["data"]][["uci"]] = exp(m[["data"]][["uci"]])
m[["layers"]][[2]][["mapping"]][["label"]][[2]][[3]][[3]][[2]]=""
m[["layers"]][[2]][["mapping"]][["label"]][[2]][[3]][[3]][[4]]=""
m +
scale_fill_gradient2(low="red", mid="white", high="springgreen4", midpoint=1)
#森林图
f<- nma.forest(fixed_effects_results,
central.tdcy="median",
log.scale =FALSE,
comparator ='che')
f
#手动画图
# 创建数据框
df <- data.frame(
scheme = f[["data"]][["trt"]],
hr = exp(f[["data"]][["mean"]]),
lower = exp(f[["data"]][["lci"]]),
upper = exp(f[["data"]][["uci"]])
)
# 创建一个新的数据框
rect_df <- data.frame(scheme = df$scheme,
ymin = seq(0.5, 5.5, by = 1),
ymax = seq(1.5, 6.5, by = 1),
fill = c("grey", "white"))
# 绘制森林图
df$hr <- round(df$hr, 2)
df$lower <- round(df$lower, 2)
df$upper <- round(df$upper, 2)
df$text <- paste0("HR = ", df$hr, "\n95% CI = (", df$lower, ", ", df$upper, ")")
ggplot(df) +
geom_pointrange(aes(x = hr,
y = scheme,
xmin = lower,
xmax = upper),
color = "black") +
geom_vline(xintercept = 1,
linetype = "dashed",
color = "black") +
xlab("HR (95% CI)") +
ylab("Scheme") +
ggtitle("Hazard ratio compared with che")+
geom_text(aes(x = 0.85,
y = scheme,
label = text),
hjust = 0)+
scale_color_jama()+
theme_bw()
#PFS----
rm(list = ls())
setwd("D:/project/NMA/cox_1/pfs")
data <- read_csv("cox_pfs.csv")
data <- data.prep(arm.data = data,
varname.t = "Treatment",
varname.s = "Study")
#网状图
net.plot(data)
#构建contrast_based模型
fixed_effects_model <- nma.model.contrast(data_contrast = data,
differences = "logHR",
se.diffs = "std.err",
reference = "che",
type = "consistency",
effects = "fixed",
scale = "Log-odds Ratio")
set.seed(20232023)
fixed_effects_results <- nma.run(fixed_effects_model,
n.adapt=1000,
n.burnin=1000,
n.iter=10000)
#NMA分析的效应模型评估，即评估模型的拟合和识别潜在异常值，并输出杠杆图
nma.fit(fixed_effects_results)
#治疗排名结果图
sucra_out<- nma.rank(fixed_effects_results,
largerbetter=FALSE)
r<- sucra_out$rankogram+theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1))
r
sucra_out$sucraplot
#排名表热图
league.out<- nma.league(fixed_effects_results,
central.tdcy="median",
order =sucra_out$order,
log.scale =FALSE,
low.colour ="springgreen4",
mid.colour = "white",
high.colour ="red",
digits = 2)
m = league.out$heatplot
m[["plot_env"]][["midpoint"]] = 1
m[["data"]][["ct.stat"]] = exp(m[["data"]][["ct.stat"]])
m[["data"]][["lci"]] = exp(m[["data"]][["lci"]])
m[["data"]][["uci"]] = exp(m[["data"]][["uci"]])
m[["layers"]][[2]][["mapping"]][["label"]][[2]][[3]][[3]][[2]]=""
m[["layers"]][[2]][["mapping"]][["label"]][[2]][[3]][[3]][[4]]=""
m +
scale_fill_gradient2(low="red", mid="white", high="springgreen4", midpoint=1)
#森林图
f<- nma.forest(fixed_effects_results,
central.tdcy="median",
log.scale =FALSE,
comparator ='che')
f
#手动画图
# 创建数据框
df <- data.frame(
scheme = f[["data"]][["trt"]],
hr = exp(f[["data"]][["mean"]]),
lower = exp(f[["data"]][["lci"]]),
upper = exp(f[["data"]][["uci"]])
)
# 创建一个新的数据框
rect_df <- data.frame(scheme = df$scheme,
ymin = seq(0.5, 5.5, by = 1),
ymax = seq(1.5, 6.5, by = 1),
fill = c("grey", "white"))
# 绘制森林图
df$hr <- round(df$hr, 2)
df$lower <- round(df$lower, 2)
df$upper <- round(df$upper, 2)
df$text <- paste0("HR = ", df$hr, "\n95% CI = (", df$lower, ", ", df$upper, ")")
ggplot(df) +
geom_pointrange(aes(x = hr,
y = scheme,
xmin = lower,
xmax = upper),
color = "black") +
geom_vline(xintercept = 1,
linetype = "dashed",
color = "black") +
xlab("HR (95% CI)") +
ylab("Scheme") +
ggtitle("Hazard ratio compared with che")+
geom_text(aes(x = 0.85,
y = scheme,
label = text),
hjust = 0)+
scale_color_jama()+
theme_bw()
#trace plot
nma.trace(fixed_effects_results, n = "all", thin = 1, colours = "DEFAULT")
#diag plot
nma.diag(
fixed_effects_results,
trace = TRUE,
gelman.rubin = TRUE,
geweke = TRUE,
params = "all",
thin = 1,
ncol = 1,
nrow = 3,
plot_prompt = TRUE,
geweke_frac1 = 0.1,
geweke_frac2 = 0.5
)
#diag plot
nma.diag(
fixed_effects_results,
trace = FALSE,
gelman.rubin = TRUE,
geweke = TRUE,
params = "all",
thin = 1,
ncol = 1,
nrow = 3,
plot_prompt = TRUE,
geweke_frac1 = 0.1,
geweke_frac2 = 0.5
)
#diag plot
nma.diag(
fixed_effects_results,
trace = TRUE,
gelman.rubin = TRUE,
geweke = TRUE,
params = "all",
thin = 1,
ncol = 1,
nrow = 3,
plot_prompt = FALSE,
geweke_frac1 = 0.1,
geweke_frac2 = 0.5
)
#OS----
rm(list = ls())
setwd("D:/project/NMA/cox_1/os")
data <- read_csv("cox_os.csv")
data <- data.prep(arm.data = data,
varname.t = "Treatment",
varname.s = "Study")
#构建contrast_based模型
fixed_effects_model <- nma.model.contrast(data_contrast = data,
differences = "logHR",
se.diffs = "std.err",
reference = "che",
type = "consistency",
effects = "fixed",
scale = "Log-odds Ratio")
#OS----
rm(list = ls())
setwd("D:/project/NMA/cox_1/os")
data <- read_csv("cox_os.csv")
data <- data.prep(arm.data = data,
varname.t = "Treatment",
varname.s = "Study")
#构建contrast_based模型
fixed_effects_model <- nma.model.contrast(data_contrast = data,
differences = "logHR",
se.diffs = "std.err",
reference = "che",
type = "consistency",
effects = "fixed",
scale = "Log-odds Ratio")
set.seed(20232023)
fixed_effects_results <- nma.run(fixed_effects_model,
n.adapt=1000,
n.burnin=1000,
n.iter=10000)
#trace and diag plot
nma.diag(
fixed_effects_results,
trace = TRUE,
gelman.rubin = TRUE,
geweke = TRUE,
params = "all",
thin = 1,
ncol = 1,
nrow = 3,
plot_prompt = TRUE,
geweke_frac1 = 0.1,
geweke_frac2 = 0.5
)
